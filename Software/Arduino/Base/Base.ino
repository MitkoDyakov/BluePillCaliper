#include "stm32f1xx_hal.h"
#include "stm32f1xx_hal_adc.h"
#include "stm32f1xx_hal_dma.h"

#if !defined(STM32_CORE_VERSION) || (STM32_CORE_VERSION  < 0x01090000)
#error "Due to API change, this sketch is compatible with STM32_CORE_VERSION  >= 0x01090000"
#endif

#define NUMBER_OF_PUN_STATES  (132u)
#define USER_PIN (PB14)
#define SENSOR_PIN (PB1)

uint32_t pinState[NUMBER_OF_PUN_STATES] = {0b00000000010101010000000010101010, 0b00000000010101010000000010101010, 0b00000000011010100000000010010101, 0b00000000011010100000000010010101, 0b00000000010101010000000010101010, 0b00000000100101010000000001101010, 0b00000000011010100000000010010101, 0b00000000011010100000000010010101, 0b00000000010101010000000010101010, 0b00000000100101010000000001101010, 0b00000000011010100000000010010101, 0b00000000011010100000000010010101, 0b00000000100101010000000001101010, 0b00000000100101010000000001101010, 0b00000000010110100000000010100101, 0b00000000011010100000000010010101, 0b00000000100101010000000001101010, 0b00000000100101010000000001101010, 0b00000000010110100000000010100101, 0b00000000010110100000000010100101, 0b00000000100101010000000001101010, 0b00000000101001010000000001011010, 0b00000000010110100000000010100101, 0b00000000010110100000000010100101, 0b00000000100101010000000001101010, 0b00000000101001010000000001011010, 0b00000000010110100000000010100101, 0b00000000010110100000000010100101, 0b00000000101001010000000001011010, 0b00000000101001010000000001011010, 0b00000000010101100000000010101001, 0b00000000010110100000000010100101, 0b00000000101001010000000001011010, 0b00000000101001010000000001011010, 0b00000000010101100000000010101001, 0b00000000010101100000000010101001, 0b00000000101001010000000001011010, 0b00000000101010010000000001010110, 0b00000000010101100000000010101001, 0b00000000010101100000000010101001, 0b00000000101001010000000001011010, 0b00000000101010010000000001010110, 0b00000000010101100000000010101001, 0b00000000010101100000000010101001, 0b00000000101010010000000001010110, 0b00000000101010010000000001010110, 0b00000000010101010000000010101010, 0b00000000010101100000000010101001, 0b00000000101010010000000001010110, 0b00000000101010010000000001010110, 0b00000000010101010000000010101010, 0b00000000010101010000000010101010, 0b00000000101010010000000001010110, 0b00000000101010100000000001010101, 0b00000000010101010000000010101010, 0b00000000010101010000000010101010, 0b00000000101010010000000001010110, 0b00000000101010100000000001010101, 0b00000000010101010000000010101010, 0b00000000010101010000000010101010, 0b00000000101010100000000001010101, 0b00000000101010100000000001010101, 0b00000000010101010000000010101010, 0b00000000010101010000000010101010, 0b00000000101010100000000001010101, 0b00000000101010100000000001010101, 0b00000000100101010000000001101010, 0b00000000010101010000000010101010, 0b00000000101010100000000001010101, 0b00000000101010100000000001010101, 0b00000000100101010000000001101010, 0b00000000100101010000000001101010, 0b00000000101010100000000001010101, 0b00000000011010100000000010010101, 0b00000000100101010000000001101010, 0b00000000100101010000000001101010, 0b00000000101010100000000001010101, 0b00000000011010100000000010010101, 0b00000000100101010000000001101010, 0b00000000100101010000000001101010, 0b00000000011010100000000010010101, 0b00000000011010100000000010010101, 0b00000000101001010000000001011010, 0b00000000100101010000000001101010, 0b00000000011010100000000010010101, 0b00000000011010100000000010010101, 0b00000000101001010000000001011010, 0b00000000101001010000000001011010, 0b00000000011010100000000010010101, 0b00000000010110100000000010100101, 0b00000000101001010000000001011010, 0b00000000101001010000000001011010, 0b00000000011010100000000010010101, 0b00000000010110100000000010100101, 0b00000000101001010000000001011010, 0b00000000101001010000000001011010, 0b00000000010110100000000010100101, 0b00000000010110100000000010100101, 0b00000000101010010000000001010110, 0b00000000101001010000000001011010, 0b00000000010110100000000010100101, 0b00000000010110100000000010100101, 0b00000000101010010000000001010110, 0b00000000101010010000000001010110, 0b00000000010110100000000010100101, 0b00000000010101100000000010101001, 0b00000000101010010000000001010110, 0b00000000101010010000000001010110, 0b00000000010110100000000010100101, 0b00000000010101100000000010101001, 0b00000000101010010000000001010110, 0b00000000101010010000000001010110, 0b00000000010101100000000010101001, 0b00000000010101100000000010101001, 0b00000000101010100000000001010101, 0b00000000101010010000000001010110, 0b00000000010101100000000010101001, 0b00000000010101100000000010101001, 0b00000000101010100000000001010101, 0b00000000101010100000000001010101, 0b00000000010101100000000010101001, 0b00000000010101010000000010101010, 0b00000000101010100000000001010101, 0b00000000101010100000000001010101, 0b00000000010101100000000010101001, 0b00000000010101010000000010101010, 0b00000000101010100000000001010101, 0b00000000101010100000000001010101, 0b00000000010101010000000010101010, 0b00000000010101010000000010101010, 0b00000000011010100000000010010101, 0b00000000101010100000000001010101};
volatile uint16_t currentPinState = 0;

void ISR_button_pressed() 
{    
  // Handle user input 
}

void Update_IT_callback(void)
{ 
  GPIOA->BSRR = pinState[currentPinState];      
  currentPinState++;
  if(NUMBER_OF_PUN_STATES == currentPinState)
  {
    currentPinState = 0;
  }
}

void setup() {
  // Setup the timer for the 8 excitation pins
  TIM_TypeDef *Instance = TIM2;
  HardwareTimer *timer2 = new HardwareTimer(Instance);
  timer2->setOverflow(15, MICROSEC_FORMAT); // 10 Hz
  timer2->attachInterrupt(Update_IT_callback);
  timer2->resume();

  // user input
  pinMode(USER_PIN, INPUT);
  attachInterrupt(digitalPinToInterrupt(USER_PIN), ISR_button_pressed, FALLING);

  // USB Serial port
  Serial.begin(115200);
  Serial.println("Setup is complete!");

  // Analog init
  // you can read the sensor output by analogRead(SENSOR_PIN)
}

void loop() {

}

